apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'


def projectPropertiesFile = rootProject.file("../../proj.properties")

def projectProperties = new Properties()

projectProperties.load(new FileInputStream(projectPropertiesFile))

ext."signing.keyId"=projectProperties['gpg_key_id']
ext."signing.password"=projectProperties['gpg_password']
ext."signing.secretKeyRingFile"=projectProperties['gpg_secret_keyring_file']
ext.projectProperties = projectProperties


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.squareup:javapoet:1.9.0'
    compile 'org.aspectj:aspectjtools:1.8.9'
    compile 'org.aspectj:aspectjrt:1.8.9'
    testCompile(
            'junit:junit:4.12',
            'org.codehaus.groovy:groovy-all:2.4.4',
            'org.spockframework:spock-core:1.0-groovy-2.4',
            'com.google.testing.compile:compile-testing:0.12',
    )
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

group = 'com.codigine.easylog'

publishing {
    publications {
        mavenCustom(MavenPublication) {
            groupId group
            artifactId 'annotation-processor'
            from components.java
            version "${projectProperties['artifact_version']}"

            pom.withXml {
                def deps = asNode().dependencies
                deps.get(0).children().removeAll {
                    def artifactName = it.artifactId.get(0).value().toString()
                    if(artifactName == "[annotation]") {
                        println "Removing dependency: " + artifactName
                        return true;
                    }else{
                        println "Keeping dependency: " + artifactName
                        return false;
                    }
                }

                deps.'*'.findAll() {
                    println "Included dependency: " + it.artifactId.get(0).value()
                }
            }

        }
    }
}

sourceSets {
    test {
        resources.srcDirs = ["src/test/resources"]
    }

    main {
        java {
            srcDirs += 'src/main/../../../annotation/src/main'
        }
    }
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}


def isReleaseBuild() {
    return project.ext.projectProperties['artifact_version'].contains("SNAPSHOT") == false
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = 'com.codigine.easylog'
                pom.artifactId = 'annotation-processor'
                pom.version = projectProperties['artifact_version']

                repository(url: projectProperties['sonatype_release_url']) {
                    authentication(userName: projectProperties['sonatype_user'], password: projectProperties['sonatype_password'])
                }
                snapshotRepository(url: projectProperties['sonatype_snapshot_url']) {
                    authentication(userName: projectProperties['sonatype_user'], password: projectProperties['sonatype_password'])
                }

                pom.project {
                    name 'easylog'
                    packaging 'jar'
                    description 'easylog library plugin'
                    url 'https://github.com/plewand/easylog'

                    scm {
                        url 'https://github.com/plewand/easylog'
                        connection 'scm:git@github.com:plewand/easylog.git'
                        developerConnection 'scm:git@github.com:plewand/easylog.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'plewand'
                            name 'Pawe≈Ç Lewandowski'
                            email 'plewand@o2.pl'
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from tasks.javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives jar

        archives javadocJar
        archives sourcesJar
    }
}
