apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'signing'

def projectPropertiesFile = rootProject.file("../../proj.properties")

def projectProperties = new Properties()

projectProperties.load(new FileInputStream(projectPropertiesFile))

println("projectProperties['sonatype_user'] "+projectProperties['sonatype_user'])
println("adad " + projectProperties['sonatype_password'])
println("projectProperties['sonatype_release_url'] " + projectProperties['sonatype_release_url'])
println("projectProperties['sonatype_snapshot_url']"+projectProperties['sonatype_snapshot_url'])
println("ver "+ "${projectProperties['artifact_version']}")

ext."signing.keyId"=projectProperties['gpg_key_id']
ext."signing.password"=projectProperties['gpg_password']
ext."signing.secretKeyRingFile"=projectProperties['gpg_secret_keyring_file']
ext.projectProperties = projectProperties

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.2"
    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    signingConfigs {
        debug {
            keyAlias projectProperties['key_alias']
            keyPassword projectProperties['keystore_password']
            storeFile file(projectProperties['keystore_file'])
            storePassword projectProperties['keystore_password']
        }
        release {
            keyAlias projectProperties['key_alias']
            keyPassword projectProperties['keystore_password']
            storeFile file(projectProperties['keystore_file'])
            storePassword projectProperties['keystore_password']
        }
    }

    sourceSets { main { java.srcDirs = ['src/main/java', 'src/main/groovy', 'src/test/groovy','src/main/../../../annotation/src/main'] } }
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.codehaus.groovy:groovy-android-gradle-plugin:1.2.0'
    }
}
apply plugin: 'groovyx.android'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    testCompile 'org.codehaus.groovy:groovy:2.4.12:grooid'
    testCompile "org.spockframework:spock-core:1.1-groovy-2.4-rc-2"
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

def isReleaseBuild() {
    return project.ext.projectProperties['artifact_version'].contains("SNAPSHOT") == false
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = 'com.codigine'
                pom.artifactId = 'easylog'
                pom.version = projectProperties['artifact_version']

                repository(url: projectProperties['sonatype_release_url']) {
                    authentication(userName: projectProperties['sonatype_user'], password: projectProperties['sonatype_password'])
                }
                snapshotRepository(url: projectProperties['sonatype_snapshot_url']) {
                    authentication(userName: projectProperties['sonatype_user'], password: projectProperties['sonatype_password'])
                }

                pom.project {
                    name 'easylog'
                    packaging 'aar'
                    description 'easylog library'
                    url 'https://github.com/plewand/easylog'

                    scm {
                        url 'https://github.com/plewand/easylog'
                        connection 'scm:git@github.com:plewand/easylog.git'
                        developerConnection 'scm:git@github.com:plewand/easylog.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'plewand'
                            name 'Pawe≈Ç Lewandowski'
                            email 'plewand@o2.pl'
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
    }
}


publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.codigine'
            artifactId 'easylog'
            version "${projectProperties['artifact_version']}"
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/library-release.aar")
        }
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}